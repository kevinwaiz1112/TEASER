<%namespace file="/modelica_language/" import="get_true_false, get_list, min_orientations"/>
<%namespace file="/conversion/" import="deg_to_rad, azmiut_conv"/>
within ${zone.parent.parent.name}.${zone.parent.name}.${zone.parent.name}_DataBase;
record ${zone.parent.name}_${zone.name} "${zone.parent.name}_${zone.name}"
  extends AixLib.DataBase.ThermalZones.ZoneBaseRecord(
    T_start = ${zone.t_inside},
    withAirCap = ${get_true_false(zone.parent.library_attr.consider_heat_capacity)},
    VAir = ${zone.volume},
    AZone = ${zone.area},
    hRad = ${zone.model_attr.alpha_rad_inner_mean},
    lat = ${deg_to_rad(zone.parent.latitude)},
    nOrientations = ${min_orientations(zone.model_attr.n_outer)},
    AWin = ${get_list(zone.model_attr.window_areas)},
    ATransparent = ${get_list(zone.model_attr.window_areas)},
    hConWin = ${zone.model_attr.alpha_conv_inner_win},
    RWin = ${zone.model_attr.r1_win},
    gWin = ${zone.model_attr.weighted_g_value},
    UWin= ${zone.model_attr.u_value_win},
    ratioWinConRad = ${zone.model_attr.ratio_conv_rad_inner_win},
    AExt = ${get_list(zone.model_attr.facade_areas)},
    hConExt = ${zone.model_attr.alpha_conv_inner_ow},
    nExt = 1,
    RExt = {${zone.model_attr.r1_ow}},
    RExtRem = ${zone.model_attr.r_rest_ow} ,
    CExt = {${zone.model_attr.c1_ow}},
    AInt = ${zone.model_attr.area_iw},
    hConInt = ${zone.model_attr.alpha_conv_inner_iw},
    nInt = 1,
    RInt = {${zone.model_attr.r1_iw}},
    CInt = {${zone.model_attr.c1_iw}},
    AFloor = ${zone.model_attr.area_gf},
    hConFloor = ${zone.model_attr.alpha_conv_inner_gf},
    nFloor = 1,
    RFloor = {${zone.model_attr.r1_gf}},
    RFloorRem =  ${zone.model_attr.r_rest_gf},
    CFloor = {${zone.model_attr.c1_gf}},
    ARoof = ${zone.model_attr.area_rt},
    hConRoof = ${zone.model_attr.alpha_conv_inner_rt},
    nRoof = 1,
    RRoof = {${zone.model_attr.r1_rt}},
    RRoofRem = ${zone.model_attr.r_rest_rt},
    CRoof = {${zone.model_attr.c1_rt}},
    nOrientationsRoof = ${min_orientations(zone.model_attr.n_rt)},
    tiltRoof = ${get_list(deg_to_rad(zone.model_attr.tilt_rt))},
    aziRoof = ${get_list(azmiut_conv(zone.model_attr.orientation_rt))},
    wfRoof = ${get_list(zone.model_attr.weightfactor_rt)},
    aRoof = ${zone.model_attr.solar_absorp_rt},
    aExt = ${zone.model_attr.solar_absorp_ow},
    nNZs = 1,
    ANZ = {0.0},
    hConNZ = {0.0},
    nNZ = 1,
    RNZ = {{0.00001}},
    RNZRem = {0.00001},
    CNZ = {{0.00001}},
    otherNZIndex = {1},
    thisZoneIndex = ${zone.parent.thermal_zones.index(zone) + 1},
    TSoil = ${zone.t_ground},
% if zone.parent.parent.t_soil_mode == 3:
    TSoilDataSource = AixLib.BoundaryConditions.GroundTemperature.GroundTemperatureDataSource.File,
% elif zone.parent.parent.t_soil_mode == 2:
    TSoilDataSource = AixLib.BoundaryConditions.GroundTemperature.GroundTemperatureDataSource.Sine,
% else:
    TSoilDataSource = AixLib.BoundaryConditions.GroundTemperature.GroundTemperatureDataSource.Constant,
% endif
    TSoilOffsetTime = ${zone.time_to_minimal_t_ground},
    TSoilAmplitude = ${zone.t_ground_amplitude},
% if zone.parent.parent.t_soil_mode == 3:
    TSoilFile = Modelica.Utilities.Files.loadResource("modelica://${zone.parent.parent.name}/${zone.parent.parent.t_soil_file_name}"),
% else:
    TSoilFile = "NoName",
% endif
    hConWallOut = ${zone.model_attr.alpha_conv_outer_ow},
    hRadWall = ${zone.model_attr.alpha_rad_outer_ow},
    hConWinOut = ${zone.model_attr.alpha_conv_outer_win},
    hConRoofOut = ${zone.model_attr.alpha_conv_outer_rt},
    hRadRoof = ${zone.model_attr.alpha_rad_outer_rt},
    tiltExtWalls = ${get_list(deg_to_rad(zone.model_attr.tilt_facade))},
    aziExtWalls = ${get_list(azmiut_conv(zone.model_attr.orientation_facade))},
    wfWall = ${get_list(zone.model_attr.weightfactor_ow)},
    wfWin = ${get_list(zone.model_attr.weightfactor_win)},
    wfGro = ${zone.model_attr.weightfactor_ground},
    use_lpg_people = false,
    use_lpg_machines = false,
    use_lpg_light = false,
    A_gains_people = ${zone.area},
    A_gains_machines = ${zone.area},
    A_gains_light = ${zone.area},
    specificPeople = ${zone.use_conditions.persons},
    internalGainsMoistureNoPeople = ${zone.use_conditions.internal_gains_moisture_no_people},
    fixedHeatFlowRatePersons = ${zone.use_conditions.fixed_heat_flow_rate_persons},
    activityDegree = ${zone.use_conditions.activity_degree_persons},
    ratioConvectiveHeatPeople = ${zone.use_conditions.ratio_conv_rad_persons},
    internalGainsMachinesSpecific = ${zone.use_conditions.machines},
    ratioConvectiveHeatMachines = ${zone.use_conditions.ratio_conv_rad_machines},
    lightingPowerSpecific = ${zone.use_conditions.lighting_power},
    ratioConvectiveHeatLighting = ${zone.use_conditions.ratio_conv_rad_lighting},
    useConstantACHrate = ${get_true_false(zone.use_conditions.use_constant_infiltration)},
    baseACH = ${zone.use_conditions.infiltration_rate},
    maxUserACH = ${zone.use_conditions.max_user_infiltration},
    maxOverheatingACH = ${get_list(zone.use_conditions.max_overheating_infiltration)},
    maxSummerACH = ${get_list(zone.use_conditions.max_summer_infiltration)},
    winterReduction = ${get_list(zone.use_conditions.winter_reduction_infiltration)},
    maxIrr = ${get_list(zone.model_attr.shading_max_irr)},
    shadingFactor = ${get_list(zone.model_attr.shading_g_total)},
    withAHU = ${get_true_false(zone.use_conditions.with_ahu)},
    minAHU = ${zone.use_conditions.min_ahu},
    maxAHU = ${zone.use_conditions.max_ahu},
    hHeat = ${zone.model_attr.heat_load},
    lHeat = 0,
    KRHeat = 10000,
    TNHeat = 1,
    HeaterOn = ${get_true_false(zone.use_conditions.with_heating)},
    hCool = 0,
    lCool = ${zone.model_attr.cool_load},
    heaLoadFacOut = 1,
    heaLoadFacGrd = 1,
    KRCool = 10000,
    TNCool = 1,
    CoolerOn = ${get_true_false(zone.use_conditions.with_cooling)},
    withIdealThresholds = ${get_true_false(zone.use_conditions.with_ideal_thresholds)},
    TThresholdHeater = ${zone.use_conditions.T_threshold_heating},
    TThresholdCooler = ${zone.use_conditions.T_threshold_cooling});
end ${zone.parent.name}_${zone.name};
